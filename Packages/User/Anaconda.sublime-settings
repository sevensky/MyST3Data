/*

    Anaconda default settings
    Autocompletion 自动完成，该选项默认开启，同时提供多种配置选项。
    Code linting 使用支持 pep8 标准的 PyLint 或者 PyFlakes。因为我个人使用的是另外的 linting 工具，所以我会在 Anaconda 的配置文件 Anaconda.sublime-settings 中将 linting 完全禁用。操作如下: Sublime > Preferences > Package Settings > Anaconda > Settings – User： {"anaconda_linting": false}
    McCabe code complexity checker 让你可以在特定的文件中使用 McCabe complexity checker. 如果你对软件复杂度检查工具不太熟悉的话，请务必先浏览上边的链接。
    Goto Definitions 能够在你的整个工程中查找并且显示任意一个变量，函数，或者类的定义。
    Find Usage 能够快速的查找某个变量，函数或者类在某个特定文件中的什么地方被使用了。
    Show Documentation： 能够显示一个函数或者类的说明性字符串(当然，是在定义了字符串的情况下)
        http://damnwidget.github.io/anaconda/IDE/
*/
{   
    "folders":
    [
        {
            "follow_symlinks": true,
            "path": "."
        }
    ],
    "extra_paths":
    [
        "D:/Program Files (x86)/Sublime Text 3",
        "F:/Anaconda2/envs/dev/Lib/site-packages",
        "F:/Anaconda2/envs/dev/Scripts",
        "E:/1GitHub/Python.DataYes/trade/AlgoTrading",
        "E:/1GitHub/Python/amyproj1",
        // "$project_path/AlgoTrading/AlgoTrading",
    ],
    /*
        Default python interpreter.
        This can (and should) be overridden by project settings
    */
    // "python_interpreter": "/usr/bin/pypy-c2.4",
    // "python_interpreter": "stackless_python3",
    // "python_interpreter": "$VIRTUAL_ENV/bin/python" ,
    // "python_interpreter": "~/virtualenvs/my_project/bin/python" ,
    // "python_interpreter": "python",
    // "python_interpreter": "F:/Anaconda2/envs/dev/python.exe" ,
    
    /*
        Auto kill and start a new jsonserver on project switching
        anaconda将检测项目开关将重新连接新的jsonserver与交换项目配置
        自动更新 选择的项目
        python_interpreter 改变时触发
    */
    "auto_project_switch": true,

    /*
        Updates the project and adds/modifies   `builder_systems`
        *不要开启* 自动更新Anaconda Python Builder配置为默认 'templates/python_build.tpl'
    */
    "auto_python_builder_enabled": false,
  /*
        Debug and development options

        Use those options only for debugging and development purposes, they can
        and will slowdown your Sublime Text

        anconda_debug can be set as: false or profiler

        If this is set as profiler, Anaconda will run a profiler on autocomplete
        and print its results in the Sublime Text console.

        NOTE: cProfile can't be imported in all the platforms, at least not in
        Linux, this is an already reported bug:

            http://www.sublimetext.com/forum/viewtopic.php?f=3&t=13698
            https://github.com/SublimeText/Issues/issues/127


                false 或 profiler
    */
    
    "anaconda_debug": "false",

    /*
        Anaconda Tooltip Options
    */
    //  "light" or "dark"
    "anaconda_tooltip_theme": "dark",  
    /*
        If you set the following option as true, anaconda will display the
        documentation of modules, classes or methods in a floating popup
    */
    "enable_docstrings_tooltip": true,
    /*
        If you set the following option as true, anaconda will display the
        signatures of the methods you are using while typing
    */
    "display_signatures": true,
    /*  签名tips
        set true, anaconda will display the signatures of the methods in a floating popup
        *note*: this action takes effect if "display_signatures" is true
    */
    "enable_signatures_tooltip": true,

    /*
        set  true, anaconda will merge the outputs of display_signatures and show documentation
        *note*: This has only effect if tooltips are enabled
    */
    "merge_signatures_and_doc": true,


    /*
        Debug Mode:

        If you need to debug the jsonserver.py service for any reason, you
        can configure the following options to make the plugin to connect
        always to the same port in your local machine.

        Procedure:

            1. Set the debug_mode as true
            2. Set the debug_port to your desired port
            3. Close Sublime Text 3
            4. cd to your Packages/Anaconda directory
            5. start the jsonserver manually:
                python -B anaconda_server/jsonserver.py -p test 9999 DEBUG
            6. Start your Sublime Text 3 and

        Then your anaconda plugin will use the configured server and you will
        get debug messages in the terminal where you ran it
        调试模式 开启后cmd运行 
        python -B anaconda_server/jsonserver.py -p test 9999 DEBUG
        在 C:\Users\Administrator\AppData\Roaming\Jedi\Jedi 查看
    */
    "jsonserver_debug": false,
    "jsonserver_debug_port": 9999,


    /*
        Set those as true if you don't want Sublime Text regular completions
        关闭自动补全 默认 false false
    */
    "suppress_word_completions": true,         
    "suppress_explicit_completions": true,

    /*
        如果complete_parameters 真，
        巨蟒将函数和类的参数对其完成的。
        如果complete_all_parameters 真，
        它将添加所有可能的参数，如果它是假的，它将只增加必要参数
        默认 false false
    */
    "complete_parameters": true,
    "complete_all_parameters": true,

    /*
        Set the threshold limit for McCabe complexity checker
    */
    "mccabe_threshold": 7,

    /*
        Set is a false to disable Anaconda Linting totally
        代码检查
    */
    "anaconda_linting": false,

    /*
        Sets the linting behaviour for anaconda:

        "always" - Linting works always even while you are writing (in the background)
        "load-save" - Linting works in file load and save only
        "save-only" - Linting works in file save only
    */
    "anaconda_linting_behaviour": "always",

    /*
        The minimum delay in seconds (fractional seconds are okay) before
        a linter is run when the "anaconda_linting" setting is true. This allows
        you to have background linting active, but defer the actual linting
        until you are idle. When this value is greater than the built in linting delay,
        errors are erased when the file is modified, since the assumption is
        you don't want to see errors while you type (unless the option
        anaconda_linter_persistent is true).
    */
    "anaconda_linter_delay": 0.5,

    /*
        If true anaconda does not remove lint marks while you type
    */
    "anaconda_linter_persistent": false,

    // If true, anaconda draws gutter marks on line with errors
    "anaconda_gutter_marks": true,

    /*

        If anaconda_gutter_marks is true, this determines what theme is used.
        Theme 'basic' only adds dots and circles to gutter.

        Other available themes are 'alpha', 'bright', 'dark', 'hard' and
        'simple'. To see icons that will be used for each theme check
        gutter_icon_themes folder in Anaconda package.
    */
    "anaconda_gutter_theme": "basic",

    /*
        If 'outline' (default) anaconda will outline error lines
        If 'fill' anaconda will fill the lines
        If 'none' anaconda will not draw anything on error lines
    */
    "anaconda_linter_mark_style": "outline",

    /*
        If anaconda_linter_mark_style is set to none and this is set to false,
        anaconda will not underline errors

        If anaconda_linter_mark_style is set to anything else, this option is
        ignored
    */
    "anaconda_linter_underlines": true,

    /*
        If anaconda_linter_show_errors_on_save is set to true, anaconda
        will show a list of errors when the user save the file

        This is disabled by default
    */
    "anaconda_linter_show_errors_on_save": false,

    /*
        Use PyLint instead of PyFlakes and PEP-8

        **** WARNING ****

        - If you set this value as true, PyFlakes and pep8 will not bet used
        - PyLint does *NOT* support lint buffers that are not already saved in
          the file system

        **** WARNING ****
    */
    "use_pylint": false,

    // Set this to false to turn pep8 checking off completely
    "pep8": true,

    /*
        If setted, the given file will be used as configuration for pep8

        **** WARNING ****

        - If this option is set to something different than false,
          pep8_ignore and pep8_max_line_length will be silently ignored

        **** WARNING ****
    */
    "pep8_rcfile": false,

    /*
        A list of pep8 error numbers to ignore.
        The list of error codes is in this file: https://github.com/jcrocholl/pep8/blob/master/pep8.py.
        Search for "Ennn:", where nnn is a 3-digit number.
    */
    "pep8_ignore":
    [
    ],

    // Maximum line length for pep8
    "pep8_max_line_length": 79,

    /*
        You can override the level of PEP8 errors altering this mapping.
        WARNING: Be careful with this option, the only valid error level values
        are:

            * E for errors (reduced to Warning by default)
            * W for warnings (reduced to Violation by default)
            * V for convention violations

        If you set a value that is not listed here, anaconda will ignore your
        setting
    */
    "pep8_error_levels": {"E": "W", "W": "V", "V": "V"},

    // Set this to true to turn pep257 checking on
    "pep257": false,

    /*
        A list of pep257 error numbers to ignore.
        The list can be found here: https://github.com/GreenSteam/pep257/#error-codes
        D209 Multi-line docstring should end with 1 blank line is ignored by
        default as it has been deprecated.
    */
    "pep257_ignore":
    [
        "D209"
    ],

    /*
        You can ignore some of the "undefined name xxx"
        errors (comes in handy if you work with post-processors, globals/builtins available only at runtime, etc.).
        You can control what names will be ignored with the user setting "pyflakes_ignore".

        Example:

        "pyflakes_ignore":
            [
                "some_custom_builtin_o_mine",
                "A_GLOBAL_CONSTANT"
            ],
    */
    "pyflakes_ignore":
    [
    ],

    /*
        Now is possible to ignore specific error types adding them on this
        list, (just uncomment them)
    */
    "pyflakes_explicit_ignore":
    [
        // "Redefined",
        // "UnusedImport",
        // "UndefinedName",
        // "UndefinedLocal",
        // "UnusedVariable,",
        // "UndefinedExport",
        // "DuplicateArgument",
        // "RedefinedWhileUnused"
    ],

    /*
        If setted, the given file will be used as configuration for PyLint

        **** WARNING ****

            - If this option is set to something different than false,
              pylint_ignore will be silently ignored

            **** WARNING ****
    */
    "pylint_rcfile": false,

    /*
        You can ignore specific PyLint error codes using this configuration.
        We strongly suggest that you better configure your pylintrc file to
        determine which type of error is important to you
    */
    "pylint_ignore":
    [
        // "0201"
    ],

    /*
        Ordinarily pyflakes will issue a warning when 'from foo import *'
        is used, but it is ignored since the warning is not that helpful.
        If you want to see this warning, set this option to false.
    */
    "pyflakes_ignore_import_*": true,

    /*
        Set the following option to true if you want that anaconda check
        the validity of your imports when the linting process is fired.

        WARNING: take into account that anaconda compiles and import the
        modules in the JsonServer memory segment in order to check this
    */
    "validate_imports": false,

  

    /*
        Anaconda test runner related configuration.

        The anaconda's test runner is originally a contribution by NorthIsUp
            https://github.com/NorthIsUp

        Run Twisted's trial based test suite under a virtualenv project:

            // this is your <ProjectName>.sublime-project file
            "settings": {
                "python_interpreter": "~/.virtualenvs/project_name",
                "test_command": "trial",
                "test_virtualenv": "~/.virtualenvs/project_name",
                "test_project_path": "project_src"
            }

        Run Django project tests using nose2 with a virtualenv:

            // this is your <ProjectName>.sublime-project file
            "settings": {
                "python_interpreter": "~/.virtualenvs/django_project_name",
                "test_command": "./manage.py test --settings=tests.settings --noinput"
            }
    */

    /*
        Theme to use in the output panel.

        Uncomment the line below to override the default tests runner
        output, by default the theme is PythonConsoleDark.hidden-tmTheme
        NOTE: The file specified here **MUST** exists in `Packages/Anaconda`
    */
    "test_runner_theme": "PythonConsoleDark.hidden-tmTheme",

    /*
        Uncomment the line below to execute any command before try to execute
        your test suite. (if you need to run more than one command, just use a
        list of commands ["cmd1", "cmd2", ...])

    */
    // "test_before_command": "",

    /*
        Command to execute tests with. nosetests by default
        
        "test_command": "python -m unittest discover"

    */
    "test_command": "nosetests",

    /*
        Uncomment the line below to execute any command after execute
        your test suite.
    */
    //"test_after_command": "",

    /* This is the delimiter between the module and the class */
    "test_delimeter": ":",

    /* Uncomment the line below to use a virtualenv for your tests */
    //"test_virtualenv": ""

    /*
        Uncomment the line below to add a top level path when you ask
        anaconda to run all your project tests.

        Note: this is need for example to can run tests with `twisted's trial`
    */
    // "test_project_path": "./"
}
