{   
    // 命令和参数，未指定路径则在PATH环境变量中找
    "cmd": ["javac","-encoding","UTF-8","-d",".","$file"],  
    // 可选。获取cmd的错误输出
    "file_regex": "^(...*?):([0-9]*):?([0-9]*)",  
    // 可选。`工具`菜单中`编译`为`自动`时生效
    "selector": "source.java",  
    // 可选。输出"cmd"的编码。必须是合法的Python编码，缺省为"UTF-8"
    "encoding":"GBK",  
    // variants 可选。用来替代主构建系统的备选。如果构建系统的"selector"与激活的文件匹配，变量"name"则会出现在 Command Palette 中。
    "variants":  
        [  
            {  
                 // 仅在"variants"中是合法的 (详见 variants)。用来标识系统中不同的构建系统。如果"name"是"Run" ,则会显示在Tools | Build System 菜单下，并且可以使用Ctrl + Shift + B调用
                "name": "Run",  
                // 可选。如果该选项为"true" ，"cmd"则可以通过shell运行。
                "shell": true,  
                "cmd" :  ["start","cmd","/c", "java ${file_base_name} &echo. & pause"],  
                // /c是执行完命令后关闭cmd窗口,  
                // /k是执行完命令后不关闭cmd窗口。  
                // echo. 相当于输入一个回车  
                // pause命令使cmd窗口按任意键后才关闭  
                // 可选。在运行首行的"cmd"前会切换到该目录。运行结束后会切换到原来的目录。
                "working_dir": "${file_path}",  
                "encoding":"GBK"  
            }  
        ]  
    // 还有：
    // line_regex 可选。当"cmd"的错误输出中，file_regex与该行不匹配，如果line_regex存在，并且确实与当前行匹配， 则遍历整个缓冲区，直到与file regex匹配的行出现，并用这两个匹配决定最终要跳转的文件或行。
    // target 可选。运行的Sublime Text命令，缺省为"exec" (Packages/Default/exec.py)。该命令从 .build-system中获取配置数据。用来替代缺省的构建系统命令。注意，如果你希望替代构建系统的缺省命令，请在.sublime-build 文件中专门设置。
    // env 可选。在环境变量被传递给"cmd"前，将他们封装成词典。
    // path 可选。该选项可以在调用"cmd"前替换当前进程的PATH 。原来的 PATH 将在运行后恢复。使用这个选项可以在不修改系统设置的前提下将目录添加到 PATH 中。
}